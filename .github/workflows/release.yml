name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:  # Allow manual trigger for emergencies

permissions:
  contents: write  # Needed to create releases

jobs:
  release:
    name: Build and Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for auto-generated release notes
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'
      
      - name: Get version info
        id: version
        run: |
          # Extract version from tag
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "version_short=${VERSION#v}" >> $GITHUB_OUTPUT
          
          # Get commit info
          COMMIT=$(git rev-parse --short HEAD)
          echo "commit=${COMMIT}" >> $GITHUB_OUTPUT
          
          # Get build date
          DATE=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          echo "date=${DATE}" >> $GITHUB_OUTPUT
      
      - name: Build binaries
        run: |
          VERSION=${{ steps.version.outputs.version }}
          COMMIT=${{ steps.version.outputs.commit }}
          DATE="${{ steps.version.outputs.date }}"
          
          # Common ldflags
          LDFLAGS="-s -w \
            -X 'github.com/rana/ask/internal/version.Version=${VERSION}' \
            -X 'github.com/rana/ask/internal/version.GitCommit=${COMMIT}' \
            -X 'github.com/rana/ask/internal/version.BuildDate=${DATE}'"
          
          # Build for Darwin ARM64 (Apple Silicon)
          echo "Building for darwin-arm64..."
          GOOS=darwin GOARCH=arm64 go build -trimpath -ldflags "${LDFLAGS}" -o ask-darwin-arm64 .
          
          # Build for Linux AMD64
          echo "Building for linux-amd64..."
          GOOS=linux GOARCH=amd64 go build -trimpath -ldflags "${LDFLAGS}" -o ask-linux-amd64 .      

      - name: Create archives
        run: |
          VERSION=${{ steps.version.outputs.version }}
          
          # Darwin ARM64
          echo "Creating darwin-arm64 archive..."
          mv ask-darwin-arm64 ask
          tar -cJf ask-${VERSION}-darwin-arm64.tar.xz ask
          rm ask
          
          # Linux AMD64
          echo "Creating linux-amd64 archive..."
          mv ask-linux-amd64 ask
          tar -cJf ask-${VERSION}-linux-amd64.tar.xz ask
          rm ask
      
      - name: Generate checksums
        run: |
          VERSION=${{ steps.version.outputs.version }}
          
          # Generate SHA256 checksums
          sha256sum ask-${VERSION}-*.tar.xz > checksums.txt
          
          # Display for verification
          echo "Checksums:"
          cat checksums.txt
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          draft: false  # Create as draft for manual review
          generate_release_notes: true  # Auto-generate from commits
          files: |
            ask-*.tar.xz
            checksums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}